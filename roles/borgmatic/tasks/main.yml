---

- name: Force gathering facts for partial ansible runs
  setup:
  tags:
    - packages
    - borgmatic

# Ubuntu 18.x and Debian Buster do not have some of the latest packages
# so we are fetching from Debian Bullseye
# [ML] Does not seem necessary on Debian 10
- name: borgmatic | Install python3-pykwalify
  apt:
    state: present
    deb: "http://ftp.us.debian.org/debian/pool/main/p/pykwalify/python3-pykwalify_1.7.0-2_amd64.deb"
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  tags:
    - borgmatic
    - packages

# zx-utils is required for installing .deb files manually (borgmatic)
- name: borgmatic | Install python3 requirements and borgbackup
  apt:
    state: present
    name: [
      'python3-colorama',
      'python3-pkg-resources',
      'python3-pykwalify',
      'python3-requests',
      'python3-ruamel.yaml',
      'borgbackup',
      'xz-utils',
    ]
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  tags:
    - borgmatic
    - packages

- name: borgmatic | Install the borgmatic deb package from Debian Bullseye
  apt:
    state: present
    deb: "http://ftp.us.debian.org/debian/pool/main/b/borgmatic/borgmatic_1.5.12-2_all.deb"
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  tags:
    - borgmatic
    - packages

- name: Create the borgmatic config directory
  file:
    path: "/etc/borgmatic"
    state: directory
    owner: "root"
    group: "root"
    mode: 0700
  tags:
    - borgmatic
    - borgmatic-confs

- name: Deploy the main borgmatic configuration file.
  template:
    src: "etc/borgmatic/config.yaml"
    dest: "/etc/borgmatic/config.yaml"
    owner: "root"
    group: "root"
    mode: 0600
  tags:
    - borgmatic
    - borgmatic-confs

# Configure cron path
- name: Configure cron PATH for borgmatic.
  cronvar:
    name: "PATH"
    value: "/usr/bin:/bin"
    cron_file: "borgmatic"
  tags:
    - borgmatic
    - borgmatic-confs
    - borgmatic-cron

# Run cron randomly between 23:00 AND 03:59
- name: borgmatic | Configure cron
  cron:
    name="borgmatic"
    minute="{{ 60 | random }}"
    hour="{{ ['23','0','1','2','3'] | random }}"
    job="/usr/bin/borgmatic --verbosity 0"
    cron_file="borgmatic"
    user="root"
    state=present
  tags:
    - borgmatic
    - borgmatic-confs
    - borgmatic-cron

- name: Make sure that the old mysqlbackup cron is absent
  file: path="/etc/cron.d/mysqlbackup" state=absent
  tags:
    - borgmatic
    - borgmatic-confs
    - borgmatic-cron

- name: borgmatic | Generate an ssh key if necessary for root
  user: name=root generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Add backup server to known_hosts
  shell: ssh-keyscan -H {{ borgmatic_backupserver }} >> ~/.ssh/known_hosts
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Fetch the root public ssh key
  command: cat /root/.ssh/id_rsa.pub
  register: root_pub_key
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Create the backup user on backup server
  delegate_to: "{{ borgmatic_backupserver }}"
  user: name="backups-{{ inventory_hostname_short }}" home="{{ borgmatic_server_basedir }}/{{ inventory_hostname }}"
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Update backup server home directory permissions
  delegate_to: "{{ borgmatic_backupserver }}"
  file:
    path="{{ borgmatic_server_basedir }}/{{ inventory_hostname }}"
    state=directory
    owner="backups-{{ inventory_hostname_short }}"
    group="backups-{{ inventory_hostname_short }}"
    mode=0700
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Create the backup directory on backup server
  delegate_to: "{{ borgmatic_backupserver }}"
  file:
    path="{{ borgmatic_server_basedir }}/{{ inventory_hostname }}/borg"
    state=directory
    owner="backups-{{ inventory_hostname_short }}"
    group="backups-{{ inventory_hostname_short }}"
    mode=0700
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Add the public ssh key to backup account on the backup server
  delegate_to: "{{ borgmatic_backupserver }}"
  authorized_key: user="backups-{{ inventory_hostname_short }}" key="{{root_pub_key.stdout}}"
  tags:
    - borgmatic
    - borgmatic-ssh

- name: borgmatic | Add extra ssh keys to the backup server if defined
  delegate_to: "{{ borgmatic_backupserver }}"
  authorized_key: user="backups-{{ inventory_hostname_short }}" key="{{ lookup('file', item) }}"
  with_items: "{{ borgmatic_extra_sshkeys }}"
  when: borgmatic_extra_sshkeys is defined and borgmatic_extra_sshkeys
  tags:
    - borgmatic
    - borgmatic-ssh
    - borgmatic-ssh-extra

- name: borgmatic | Check if the repository has been initialized
  stat:
    path: "/root/.borgmatic-init-{{ borgmatic_backupserver }}"
  register: borgmatic_init_exists
  tags:
    - borgmatic
    - borgmatic-init

- name: borgmatic | Initialize the repository
  shell: "env BORG_PASSPHRASE='{{ borgmatic_passphrase }}' borgmatic init -e repokey"
  when: not borgmatic_init_exists.stat.exists
  tags:
    - borgmatic
    - borgmatic-init

- name: borgmatic | Touch the init file
  file:
    path: "/root/.borgmatic-init-{{ borgmatic_backupserver }}"
    state: touch
    mode: 0600
  when: not borgmatic_init_exists.stat.exists
  tags:
    - borgmatic
    - borgmatic-init

- name: sudo | Deploy sudoers file for restoring backups
  template:
    src: "etc/sudoers.d/symbiotic-borg"
    dest: "/etc/sudoers.d/symbiotic-borg"
    owner: root
    group: root
    mode: 0440
  tags:
    - borgmatic
    - borgmatic-sudoers

- name: sudo | Deploy our wrapper scripts for mounting and unmounting
  template:
    src: "usr/local/bin/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - borg-mount
    - borg-umount
  tags:
    - borgmatic
    - borgmatic-sudoers
