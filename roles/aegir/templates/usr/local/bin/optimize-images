#!/bin/bash

# Optimize and Compress JPEG or PNG Images in Linux command line
# Initially based on:
# https://github.com/filipnet/optimize-images
# License: BSD 3-Clause "New" or "Revised" License
# Part of Coop Symbiotic's hosting scripts:
# https://github.com/coopsymbiotic/coopsymbiotic-ansible/tree/master/roles/aegir/templates/usr/local/bin

force="no"
devsite="no"
resize="yes"
ignore_warning="no"
quiet="no"

# The resize operation will look for files more than 2MB and resize them to max 2000x2000 px
# unless --devsite-cleanup is used, then we find for files more than 200k and resize them to max 300x300 px
resize_max="2000x2000"
resize_findsize="+2048k"

# For the before/after calculations
size_before=0
size_after=0

# Lower the priority of this scripts because it can be very intensive
renice -n 10 $$ > /dev/null

# Help menu
print_help() {
cat <<-HELP
Optimize or resize images in a given directory
Usage:

  --force: Run on all files, not just new files from the last 24hours
  --devsite-cleanup: Reduce images to max 300x300, which is highly destructive
                     and assumes you do not care about the images on this site.
                     Assumes --force, and does not optimize images.
  --noresize: Do NOT reduce images to max 2000x2000. Enabled by default.
  --yolo: Ignore the confirmation prompt from --devsite-cleanup
  --quiet: Reduce output, e.g. for crons (todo)

Example: ${0##*/} --devsite-cleanup ./wp-content/uploads/
HELP
exit 0
}

log_message() {
  if [ "$quiet" == "no" ]; then
    echo $1
  fi
}

# Parse Command Line Arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --force) force="yes" ;;
    --devsite-cleanup) devsite="yes"; force="yes" ;;
    --noresize) resize="no" ;;
    --yolo) ignore_warning="yes" ;;
    --quiet) quiet="yes" ;;
    --help) print_help;;
    --*)
      printf "Error: Invalid argument, run --help for valid arguments.\n"
      exit 1
        ;;
    *) image_folder=$1;;
  esac
  shift
done

if [ -z "${image_folder}" ]; then
  printf "Please specify an image folder. Type --help for examples.\n"
  exit 1
fi
if [ ! -e "$image_folder" ]; then
  printf "$image_folder: no such file or directory\n"
  exit 1
fi

# Check dependencies
command -v jpegoptim >/dev/null 2>&1 || { echo >&2 "Package jpegoptim is required but not installed. Aborting."; exit 1; }
command -v optipng >/dev/null 2>&1 || { echo >&2 "Package optipng is required but not installed. Aborting."; exit 1; }

if [ "$devsite" == "yes" ]; then
  command -v mogrify >/dev/null 2>&1 || { echo >&2 "Package imagemagick is required for mogrify. Aborting."; exit 1; }
fi

# Compression options
JPEGOPTIM_ARGS="--strip-all --overwrite --threshold=2 --max=80 --totals --all-progressive"
OPTIPNG_ARGS="-o7 -f4 -strip all -clobber"

# On dev sites, reduces images to max 200k
if [ "$devsite" == "yes" ]; then
  JPEGOPTIM_ARGS="--strip-all --overwrite --threshold=2 --max=80 --size=200k --totals --all-progressive"
fi

# Prompt for confirmation before a dangerous operation
if [ "$devsite" == "yes" ] && [ "$ignore_warning" == "no" ]; then
  echo "Are you sure? This is irreversible. It will resize images to max 300x300"
  read -p "Type 'yes' to confirm:  " -r
  if [ $REPLY != "yes" ]; then
    echo "Exiting"
    exit 1
  fi
fi

# Calculate size before running cleanup
size_before=`du -s $image_folder | awk '{ printf "%d", $1/1024 }'`

if [ "$devsite" == "no" ]; then
  # Find files to optimize
  if [ "$force" == "yes" ]; then
    log_message "Force optimization and compression of all images"
    find $image_folder -type f -size +256k -iname '*.jp*g' -exec jpegoptim $JPEGOPTIM_ARGS {} \;
    # This is very CPU intensive, not really worth it
    # find $image_folder -type f -size +256k -iname '*.png' -exec optipng $OPTIPNG_ARGS {} \;
  else
    log_message "Optimization and compression of new images"
    find $image_folder -newermt "-24 hours" -size +256k -type f -iname '*.jp*g' -exec jpegoptim $JPEGOPTIM_ARGS {} \;
    # This is very CPU intensive, not really worth it
    # find $image_folder -newermt "-24 hours" -size +100k -type f -iname '*.png' -exec optipng $OPTIPNG_ARGS {} \;
  fi
fi

# Brutal resizing for dev sites
if [ "$devsite" == "yes" ]; then
  resize_max="300x300"
  resize_findsize="+200k"
  resize="yes"
fi

width_max=${resize_max%x*}
height_max=${resize_max#*x}

if [ "$resize" == "yes" ]; then
  log_message "Resizing large images to $resize_max"
  # Give a moment to let the admin ctrl-C in panic
  sleep 2
  find $image_folder -type f -size +200k \( -iname '*.png' -o -iname '*.jp*g' \) | while read -r IMAGE_PATH; do
    # Get the dimensions of the image
    dimensions=$(identify -format "%wx%h" "$IMAGE_PATH")
    width=${dimensions%x*}
    height=${dimensions#*x}

    # Check if the image is larger than $resize_max
    if [ "$width" -gt "$width_max" ] && [ "$height" -gt "$height_max" ]; then
      mogrify -resize $resize_max "$IMAGE_PATH"
      log_message "Resized: $IMAGE_PATH"
    else
      log_message "Skipped (not larger than $resize_max): $IMAGE_PATH"
    fi
  done
fi

# Check size after
size_after=`du -s $image_folder | awk '{ printf "%d", $1/1024 }'`
size_diff="$(( $size_before - $size_after ))"

if [ "$quiet" == "no" ]; then
  echo "Folder size before: $size_before M"
  echo "Folder size after: $size_after M"
  echo "Difference: $size_diff M"
fi
