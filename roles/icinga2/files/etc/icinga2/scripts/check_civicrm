#!/usr/bin/php
<?php

$host = trim($argv[1]);
$cms = trim($argv[2]);

if (empty($host)) {
  echo 'Missing host argument.';
  exit(3);
}

function do_api_call($host, $cms, $entity, $action) {
  $civistatus = null;
  $tmp = null;
  $site_path = null;

  if ($cms == 'drupal' || $cms == 'drupal8') {
    exec('sudo -u aegir /usr/local/bin/drush @' . escapeshellarg($host) . ' cvapi ' . escapeshellarg($entity) . '.' . escapeshellarg($action) . ' --out=json', $tmp);
  }
  elseif ($cms == 'wordpress') {
    exec('sudo -u aegir /usr/local/bin/aegir-helpers site-property ' . escapeshellarg($host) . ' site_path', $site_path);
    exec('env CIVICRM_SETTINGS=' . escapeshellarg("{$site_path[0]}/wp-content/uploads/civicrm/civicrm.settings.php") . ' sudo -u www-data /usr/local/bin/cv --cwd=' . escapeshellarg($site_path[0]) . ' api ' . escapeshellarg($entity) . '.' . escapeshellarg($action), $tmp);
  }
  elseif ($cms == 'joomla') {
    global $civicrm_root;
    global $civicrm_cli_ini; // required if TZ is not the same as the server

    require_once '/etc/civicrm/' . $host . '.php';

    if ($civicrm_cli_ini) {
      exec('sudo -u www-data /usr/bin/env php -c ' . escapeshellarg($civicrm_cli_ini) . ' ' . escapeshellarg($civicrm_cli) . ' -s ' . escapeshellarg($host) . ' -u ' . escapeshellarg($civicrm_cron_user) . ' -p ' . escapeshellarg($civicrm_cron_pass) . ' -e ' . escapeshellarg($entity) . ' -a ' . escapeshellarg($action) . ' --json', $tmp);
    }
    else {
      exec('sudo -u www-data /usr/local/bin/cv --cwd=' . escapeshellarg($civicrm_root) . ' api ' . escapeshellarg($entity . '.' . $action), $tmp);
    }
  }
  else {
    echo 'Unsupported CMS: ' . $cms;
    exit(3);
  }

  if ($cms == 'joomla' || $cms == 'wordpress') {
    $civistatus = json_decode(implode(' ', $tmp));
  }
  else {
    $civistatus = json_decode($tmp[0]);
  }

  if (empty($civistatus)) {
    if ($cms == 'drupal' || $cms == 'drupal8') {
      exec('sudo -u aegir /usr/local/bin/drush @' . escapeshellarg($host) . ' cc drush');
      echo 'Failed to check status (2). Drush cache flushed for the next run.';
    }
    else {
      echo 'Failed to check status (2).';
    }

    exit(3);
  }

  if ($civistatus->is_error) {
    echo 'API call failed: ' . $civistatus->error_message;
    exit(3);
  }

  return $civistatus;
}

$domain = do_api_call($host, $cms, 'Domain', 'get');
$civistatus = do_api_call($host, $cms, 'System', 'check');

// Fetch the CiviCRM version
$version = 'unknown';

if (!empty($domain->values)) {
  $values = (array) $domain->values;
  $t = array_shift($values);
  $version = $t->version;

  // Convert the version to an integer. Performance metrics do not handle strings.
  // Ex: 5.19.beta1 => 005 019 000.01
  // Ex: 5.19.3 => 005 019 003.00
  // Ex: 5.19 => 005 019 000.00
  $parts = explode('.', $version);
  $formatted = '';

  while (count($parts)) {
    $t = array_pop($parts);

    if (substr($t, 0, 4) == 'beta') {
      // In a way, 5.19.beta1 is actually 5.19.0.1
      $formatted = '000.' . sprintf('%02d', substr($t, 4));
    }
    else {
      $formatted = sprintf('%03d', $t) . $formatted;
    }
  }

  $version = $formatted;
}

$check_status = 0;
$check_descriptions = [];
$upgrade_status = 1;

$upgrade_status_options = [
  'info' => 1,
  'notice' => 1,
  'warning' => 2,
  'alert' => 3,
  'critical' => 3,
];

foreach ($civistatus->values as $key => $val) {
  if ($val->name == 'checkVersion_upgrade') {
    $upgrade_status = $upgrade_status_options[$val->severity];
  }

  // Issue was acknowledged (hidden from the Status Check UI).
  if (!$val->is_visible) {
    continue;
  }

  // Ignore extension updates
  if ($val->title == 'Extension Update Available') {
    continue;
  }
  elseif ($val->title == 'Actualização de Extensão Disponível') {
    continue;
  }
  elseif ($val->title == 'actualización de extensión disponible') {
    continue;
  }

  if (in_array($val->severity, ['warning', 'error', 'alert', 'critical'])) {
    // We don't want to downgrade an 'error' status to 'warning'.
    if ($check_status == 0) {
      $check_status = 1;
    }

    $check_descriptions[] = $val->title;
  }

  if ($val->severity == 'error' || $val->severity == 'critical') {
    $check_status = 2;
  }
}

$metrics = "upgrade=$upgrade_status; civiver=$version";

if ($check_status == 0) {
  echo "OK | $metrics";
  exit(0);
}
else {
  echo implode(' ', $check_descriptions) . " | $metrics";
  exit($check_status);
}
